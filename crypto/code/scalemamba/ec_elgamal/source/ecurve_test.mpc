execfile('/root/SCALE-MAMBA/Programs/ecurve/ecurve.mpc')

# Assumes that using curve secp256k1

g = [sint(76049884773772239630286819839663813044215220798366048289168112050194373987235), sint(111998029357810440620223172064231485820163014246983600027697176972731586228871), sint(0)]

zero = [sint(0), sint(0), sint(1)]


testi = 0

if(True):
  print_ln("----------------------------------------")
  print_ln("Test %s: g + 0 = g", testi)
  testi = testi+1

  h = add(g, zero)
  print_ln("Expect: [%s, %s, %s]", g[0].reveal(), g[1].reveal(), g[2].reveal())
  print_ln("Actual: [%s, %s, %s]", h[0].reveal(), h[1].reveal(), h[2].reveal())

if(True):
  print_ln("----------------------------------------")
  print_ln("Test %s: 0 + g = g", testi)
  testi = testi+1

  h = add(zero, g)
  print_ln("Expect: [%s, %s, %s]", g[0].reveal(), g[1].reveal(), g[2].reveal())
  print_ln("Actual: [%s, %s, %s]", h[0].reveal(), h[1].reveal(), h[2].reveal())

if(True):
  print_ln("----------------------------------------")
  print_ln("Test %s: g + -g = 0", testi)
  testi = testi+1
  
  neg_g = [g[0], -g[1], sint(0)]
  h = add(g, neg_g)
  print_ln("Expect: [%s, %s, %s]", zero[0].reveal(), zero[1].reveal(), zero[2].reveal())
  print_ln("Actual: [%s, %s, %s]", h[0].reveal(), h[1].reveal(), h[2].reveal())
  

if(True):
  print_ln("----------------------------------------")
  print_ln("Test %s: points same (tangent case)", testi)
  testi = testi + 1

  h = add(g, g)
  print_ln("Expect: [%s, %s, %s]", cint(87769319089951641598727602179443689789417859929709280481480630259149340750010), cint(10144688788587460394801737136986608111696415328826122050698101277702425096036), cint(0))
  print_ln("Actual: [%s, %s, %s]", h[0].reveal(), h[1].reveal(), h[2].reveal())

if(True):
  print_ln("----------------------------------------")
  print_ln("Test %s: points different", testi)
  testi = testi + 1

  twog = add(g, g)
  h = add(g, twog)
  print_ln("Expect: [%s, %s, %s]", cint(92542693656085098696772938385339352822588420582624337813216040282248627413955), cint(14239752303780739818150346966851531617350387284915583440545638043800647042620), cint(0))
  print_ln("Actual: [%s, %s, %s]", h[0].reveal(), h[1].reveal(), h[2].reveal())

if(True):
  print_ln("----------------------------------------")
  print_ln("Test %s: points different, using case5 explicitly", testi)
  testi = testi + 1

  twog = add(g, g)
  h = addCase5Only(g, twog)
  print_ln("Expect: [%s, %s, %s]", cint(92542693656085098696772938385339352822588420582624337813216040282248627413955), cint(14239752303780739818150346966851531617350387284915583440545638043800647042620), cint(0))
  print_ln("Actual: [%s, %s, %s]", h[0].reveal(), h[1].reveal(), h[2].reveal())


if(True):
  print_ln("----------------------------------------")
  print_ln("Test %s: g - g = O", testi)
  testi = testi + 1

  h = sub(g, g)
  print_ln("Expect: [%s, %s, %s]", cint(0), cint(0), cint(1))
  print_ln("Actual: [%s, %s, %s]", h[0].reveal(), h[1].reveal(), h[2].reveal())


if(False):
  print_ln("----------------------------------------")
  print_ln("Test %s: inner prod (small)", testi)
  testi = testi + 1

  len = 1

  g2is = sint.Matrix(len, 3)
  g2is[0][0] = g[0]
  g2is[0][1] = g[1]
  g2is[0][2] = g[2]

  @for_range(len-1)
  def range_loop(i):
    g2i = [g2is[i][0], g2is[i][1], g2is[i][2]]
    g2inext = add(g2i, g2i)
    g2is[i+1][0] = g2inext[0]
    g2is[i+1][1] = g2inext[1]
    g2is[i+1][2] = g2inext[2]

  x = sint.Array(len)
  @for_range(len)
  def range_body(i):
    x[i] = sint(1)

  h = innerProd(g2is, x, len)

  print_ln("Expect: [%s, %s, %s]", g[0].reveal(), g[1].reveal(), g[2].reveal())
  print_ln("Actual: [%s, %s, %s]", h[0].reveal(), h[1].reveal(), h[2].reveal())

if(False):
  print_ln("----------------------------------------")
  print_ln("Test %s: inner prod g^3", testi)
  testi = testi + 1
  
  len = 2
  
  g2is = sint.Matrix(len, 3)
  g2is[0][0] = g[0]
  g2is[0][1] = g[1]
  g2is[0][2] = g[2]
  
  @for_range(len-1)
  def range_loop(i):
    g2i = [g2is[i][0], g2is[i][1], g2is[i][2]]
    g2inext = add(g2i, g2i)
    g2is[i+1][0] = g2inext[0]
    g2is[i+1][1] = g2inext[1]
    g2is[i+1][2] = g2inext[2]
    
  x = sint.Array(len)
  @for_range(len)
  def range_body(i):
    x[i] = sint(1)
    
  h = innerProd(g2is, x, len)
  
  print_ln("Expect: [%s, %s, %s]", cint(92542693656085098696772938385339352822588420582624337813216040282248627413955), cint(14239752303780739818150346966851531617350387284915583440545638043800647042620), cint(0))
  print_ln("Actual: [%s, %s, %s]", h[0].reveal(), h[1].reveal(), h[2].reveal())
  

if(False):
  print_ln("----------------------------------------")
  print_ln("Test %s: g+g in clear", testi)
  testi = testi + 1
  
  gClear = [g[0].reveal(), g[1].reveal(), g[2].reveal()]
  
  h = doubleClear(gClear)
 
  print_ln("Expect: [%s, %s, %s]", cint(87769319089951641598727602179443689789417859929709280481480630259149340750010), cint(10144688788587460394801737136986608111696415328826122050698101277702425096036), cint(0))
  print_ln("Actual: [%s, %s, %s]", h[0].reveal(), h[1].reveal(), h[2].reveal())
  

if(False):
  print_ln("----------------------------------------")
  print_ln("Test %s: g^4 by square-and-multiply", testi)
  testi = testi + 1
  
  len = 3
  
  g2is = cint.Matrix(len, 3)
  g2is[0][0] = g[0].reveal()
  g2is[0][1] = g[1].reveal()
  g2is[0][2] = g[2].reveal()
  
  @for_range(len-1)
  def range_loop(i):
    g2i = [g2is[i][0], g2is[i][1], g2is[i][2]]
    g2inext = doubleClear(g2i)
    g2is[i+1][0] = g2inext[0]
    g2is[i+1][1] = g2inext[1]
    g2is[i+1][2] = g2inext[2]

  h = sint.Array(3)
  h[0] = g2is[len-1][0]
  h[1] = g2is[len-1][1]
  h[2] = g2is[len-1][2]

  print_ln("Expect: [%s, %s, %s]", cint(55500797993390754520628679597314425508541101579429472513734157467457138489522), cint(68656549213349935177139195557791589921361485738694297381477318183146752371234), cint(0))
  print_ln("Actual: [%s, %s, %s]", h[0].reveal(), h[1].reveal(), h[2].reveal())
  

if(False):
  print_ln("----------------------------------------")
  print_ln("Test %s: multiply g*(2^3-1)", testi)
  testi = testi + 1
  
  len = 3
  
  x = sint.Array(len)
  @for_range(len)
  def range_body(i):
    x[i] = sint(1)
    
  h = multiply(g, x, len)
  
  print_ln("Expect: [%s, %s, %s]", cint(20520791743182214532943839652379780294821776899565902937735647953676989320335), cint(43495132872657505282709928863003937364348186295621408662030988521138639331603), cint(0))
  print_ln("Actual: [%s, %s, %s]", h[0].reveal(), h[1].reveal(), h[2].reveal())
  
if(False):
  print_ln("----------------------------------------")
  print_ln("Test %s: multiply g*2", testi)
  testi = testi + 1
  
  len = 2
  
  x = sint.Array(len)
  x[0] = sint(0)
  x[1] = sint(1)
    
  h = multiply(g, x, len)
  
  print_ln("Expect: [%s, %s, %s]", cint(87769319089951641598727602179443689789417859929709280481480630259149340750010), cint(10144688788587460394801737136986608111696415328826122050698101277702425096036), cint(0))
  print_ln("Actual: [%s, %s, %s]", h[0].reveal(), h[1].reveal(), h[2].reveal())

if(False):
  print_ln("----------------------------------------")
  print_ln("Test %s: multiply g*23", testi)
  testi = testi + 1
  
  len = 5
  
  x = sint.Array(len)
  x[0] = sint(1)
  x[1] = sint(1)
  x[2] = sint(1)
  x[3] = sint(0)
  x[4] = sint(1)
    
  h = multiply(g, x, len)
  
  print_ln("Expect: [%s, %s, %s]", cint(100971939107875400621024224753595555504615297536874400463253822995400150073985), cint(110645578383027771512459247014725244523819562472559885606082573747324074302689), cint(0))
  print_ln("Actual: [%s, %s, %s]", h[0].reveal(), h[1].reveal(), h[2].reveal())

if(False):
  print_ln("----------------------------------------")
  print_ln("Test %s: multiply g*(2^26-1)", testi)
  testi = testi + 1
  
  len = 26
  
  x = sint.Array(len)
  @for_range(len)
  def range_body(i):
    x[i] = sint(1)
    
  h = multiply(g, x, len)
  
  print_ln("Expect: [%s, %s, %s]", cint(82089064039114803205525192633732308404691391193898365820979691085136182095245), cint(11830904849381297282420200509690807917999444230376737931659207961639675832669), cint(0))
  print_ln("Actual: [%s, %s, %s]", h[0].reveal(), h[1].reveal(), h[2].reveal())
 

if(False):
  print_ln("----------------------------------------")
  print_ln("Test %s: multiply g*(2^254-1)", testi)
  testi = testi + 1
  
  len = 254
   
  x = sint.Array(len)
  @for_range(len)
  def range_body(i):
    x[i] = sint(1)
    
  h = multiply(g, x, len)
  
  print_ln("Expect: [%s, %s, %s]", cint(76590365751249274208845069868954101718610181863990333470775285665311250407533), cint(97009629761154096352093026844809684651691300894670034224950922314572482234486), cint(0))
  print_ln("Actual: [%s, %s, %s]", h[0].reveal(), h[1].reveal(), h[2].reveal())

 
if(True):
  print_ln("----------------------------------------")
  print_ln("Test %s: multiply g*(2^256-1)", testi)
  testi = testi + 1
  
  len = 256
   
  x = sint.Array(len)
  @for_range(len)
  def range_body(i):
    x[i] = sint(1)
    
  h = multiply(g, x, len)
  
  print_ln("Expect: [%s, %s, %s]", cint(47137703537657715444704009014284929665653584124039189721207863606278908386576), cint(96806309850591512330086502217758067966885249114790563097526036124442963336597), cint(0))
  print_ln("Actual: [%s, %s, %s]", h[0].reveal(), h[1].reveal(), h[2].reveal())
  

