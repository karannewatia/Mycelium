
execfile('/root/SCALE-MAMBA/Programs/ecurve/ecurve.mpc')
execfile('/root/SCALE-MAMBA/Programs/sort/sort.mpc')
execfile('/root/SCALE-MAMBA/Programs/shuffle/shuffle.mpc')

# Allow leakage with probability 2^(- STATISTICAL_SECURITY)
STATISTICAL_SECURITY = 40

# Make sure is consistent with local IO process
DISCRETE_LOG_IO_CODE = cint(19)

# Assumes that using curve secp256k1

# G: generator for the group
def keygen(G):

  # The secret key.
  # Technically should be chosen from [q] rather than [2^256]
  #   but it will just wrap around, so just means the entropy is 
  #   different by a negligible amount (< 2^(-80)) 
  # Currently represent secret as a bit array. 
  #   Question: is it more efficient to pick a randomly from [p] and then 
  #     do bit decomposition?
  a = sint.Array(256)
  
  for i in range(256):
    a[i] = sint.get_random_int(1)

  A = reveal(multiply(G, a, 256))
  return [A, a]

# Least-significant bits are first
def arr2Int(arr, len):
  sum = sint.Array(1)
  sum[0] = sint(0)
  @for_range(len)
  def loop_body(i):
    sum[0] = sum[0]*2
    sum[0] = sum[0] + arr[len-i-1]

  return sum[0]

def int2Arr(m, len):
  mArr = sint.Array(len)
  mInt = sint.Array(1)
  mInt[0] = m
  @for_range(len)
  def loop_body(i):
    mArri = mInt[0] % 2
    mArr[i] = mArri
    mInt[0] = (mInt[0] - mArri)/2
  return mArr

# Embeds an integer, m, in a group with generator g
def embed(g, m, len):
  mArr = int2Arr(m, len)
  M = multiply(g, mArr, len)
  return M


def isSpecial(ecPoint, proportionStored):
  return (ecPoint[1] % proportionStored == 0) 

def mux(cond, ifTrue, ifFalse):
  return ifFalse + cond*(ifTrue - ifFalse)

def storeIfSpecial(X, i, proportionStored, special, specialEmpty, specialIndex, nSpecialMax):
  isXSpecial = sint.Array(1)
  isXSpecial[0] = isSpecial(X, proportionStored)
  stored = sint.Array(1)
  stored[0] = sint(0)   # Boolean. 0= false, i.e. not yet stored.
  @for_range(nSpecialMax)
  def inner_body(j):
    shouldChange = (1 - stored[0]) * isXSpecial[0] * specialEmpty[j]
    stored[0] = mux(shouldChange, sint(1), stored[0])
    special[j][0] = mux(shouldChange, X[0], special[j][0])
    special[j][1] = mux(shouldChange, X[1], special[j][1])
    special[j][2] = mux(shouldChange, X[2], special[j][2])
    specialEmpty[j] = mux(shouldChange, sint(0), specialEmpty[j])
    specialIndex[j] = mux(shouldChange, sint(i), specialIndex[j])

# Adds noise to the point, solve the discrete log in the clear, then subtract the noise
# Returns a where b = g*a and 0 <= a < 2^(len)
def unembedBSGSLocal(g, b, len, nParties):
    a_max = (1 << len) - 1
    b_max = embed(g, a_max, len)

    flip = sint.get_random_int(1)

    flippedB = sub(b_max, b)

    maybeB = sint.Array(3)
    maybeB[0] = mux(flip, b[0], flippedB[0])
    maybeB[1] = mux(flip, b[1], flippedB[1])
    maybeB[2] = mux(flip, b[2], flippedB[2])

    noiseExp = int(STATISTICAL_SECURITY / 2)

    # The sum of two uniform distribution gives the best noise. See paper.
    r1 = sint.get_random_int(len + noiseExp)
    r2 = sint.get_random_int(len + noiseExp)
    noise = r1 + r2

    blindingFactor = embed(g, noise, len + noiseExp + 1)
    blindedPoint = reveal(add(maybeB, blindingFactor))
 
    cint.public_output(DISCRETE_LOG_IO_CODE)
    cint.public_output(cint(1 << (len + noiseExp + 1)))

    cint.public_output(g[0].reveal())
    cint.public_output(g[1].reveal())

    cint.public_output(blindedPoint[0])
    cint.public_output(blindedPoint[1])

    blindedLogPoint = cint(0)
    # It has been blinded, so can reveal.
    for i in range(nParties):
      blindedLogPoint = blindedLogPoint + sint.get_private_input_from(i).reveal()

    # Verify that the plaintext discrete log was computed correctly
    blindedPointCheck = embed(g, blindedLogPoint, len + noiseExp + 1)
    xEqual = (blindedPointCheck[0] == blindedPoint[0])
    yEqual = (blindedPointCheck[1] == blindedPoint[1])
    allIsGood = (xEqual*yEqual).reveal()
    
    maybeA = blindedLogPoint - noise
    a = mux(flip, maybeA, a_max - maybeA)
    return a, allIsGood


# Assumes len is even, half_len * 2 = len
# Also 0 \leq m < 2^len, M = m g
def unembedBSGS(g, M, half_len):
    N = 1 << half_len
  
    babySteps = sint.Array(N)
    babyIndexes = sint.Array(N)
    giantSteps = sint.Array(N)
    giantIndexes = sint.Array(N) 
    steps = sint.Array(2 * N)
    indexes = sint.Array(2 * N)

    Mplusi = sint.Array(3)
    Mplusi[0] = M[0]
    Mplusi[1] = M[1]
    Mplusi[2] = M[2]

    # Baby steps
    @for_range(N)
    def add_baby_step(i):
        # Values of x will be unique since -g[x] = -(g[x]) and 2^len << |E|
        babySteps[i] = Mplusi[0]
        babyIndexes[i] = sint(0-i)
        # Can optimize this since know what is being added.
        temp = add(Mplusi, g)
        Mplusi[0] = temp[0]
        Mplusi[1] = temp[1]
        Mplusi[2] = temp[2]
    
    gN = multiply(g, int2Arr(N, half_len + 1), half_len + 1)
    # gNj starts as identity element
    gNj = sint.Array(3)
    gNj[0] = sint(0)
    gNj[1] = sint(0)
    gNj[2] = sint(1)

    # Giant steps
    @for_range(N)
    def add_giant_step(j):
        # Values of x will be unique since -g[x] = -(g[x]) and 2^len << |E|
        giantSteps[j] = gNj[0]
        giantIndexes[j] = sint(j*N)
        temp = add(gNj, gN)
        gNj[0] = temp[0]
        gNj[1] = temp[1]
        gNj[2] = temp[2]


    @for_range(N)
    def combine(j):
        steps[j] = babySteps[j]
        steps[N+j] = giantSteps[j]
        indexes[j] = babyIndexes[j]
        indexes[N+j] = giantIndexes[j]

    @for_range(2*N)
    def curtail(i):
        steps[i] = sint(steps[i] % (1 << 40))

    noOneCheated = cint.Array(1)
    noOneCheated[0] = cint(1)

    t = 1  # Max number of dishonest players
    for i in range(t + 1):
        allIsWell = cint.Array(1)
        allIsWell[0] = cint(1)
        shuffle_player(steps, indexes, half_len + 1, i, allIsWell)
        noOneCheated[0] = noOneCheated[0] * allIsWell[0]

    result = sint.Array(1)
    result[0] = sint(0)
    if_then(noOneCheated[0] != cint(0))
    
    merge_sort(steps, indexes, 2*N)
    
    @for_range(2*N - 1)
    def check_match(i):
        result[0] = result[0] + (steps[i] == steps[i+1]) * (indexes[i] + indexes[i+1])

    else_then()
    print_ln("Someone cheated. Aborting.")
    end_if()

    return result[0]

# Where 0 \leq m < 2^len, M = m g
def unembed(g, M, len):
  a = 0
  b = 1 << len

  TRUE = sint(1)
  FALSE = sint(0)

  #d = len + log(len, 2) - 2

  logC = 1
  c = 1<<logC
  proportionStored = (1<<(len/2)) >> logC
  nSpecialMax = 5*c    # This is probabilistic. It's possible that all are special.
  print_ln("PropStored = %s", proportionStored)
  print_ln("nSpecialMax = %s", nSpecialMax)


  y = (a + b)/2
  print_ln("y= %s", y)
  W = multiply(g, int2Arr(y, len), len)

  Mgi = sint.Matrix(nSpecialMax, 3)
  MgiEmpty = sint.Array(nSpecialMax)
  MgiIndex = sint.Array(nSpecialMax)

  Ygi = sint.Matrix(nSpecialMax, 3)
  YgiEmpty = sint.Array(nSpecialMax)
  YgiIndex = sint.Array(nSpecialMax)

  @for_range(nSpecialMax)
  def range_body(i):
    MgiEmpty[i] = TRUE
    YgiEmpty[i] = TRUE

  X = sint.Array(3)
  X[0] = M[0]
  X[1] = M[1]
  X[2] = M[2]

  Y = sint.Array(3)
  Y[0] = W[0]
  Y[1] = W[1]
  Y[2] = W[2]

  @for_range(1 << len)
  def range_body(i):
    print_ln("i = %s", i)

    storeIfSpecial(X, i, proportionStored, Mgi, MgiEmpty, MgiIndex, nSpecialMax)

    print_ln("X= %s %s %s", X[0].reveal(), X[1].reveal(), X[2].reveal())
    Mtemp = add(X, g)
    X[0] = Mtemp[0]
    X[1] = Mtemp[1]
    X[2] = Mtemp[2]

    print_ln("M= %s %s %s", X[0].reveal(), X[1].reveal(), X[2].reveal())
    print_ln("Mtemp = %s %s %s", Mtemp[0].reveal(), Mtemp[1].reveal(), Mtemp[2].reveal())

    storeIfSpecial(Y, i, proportionStored, Ygi, YgiEmpty, YgiIndex, nSpecialMax)

    Ytemp = add(Y, g)
    Y[0] = Ytemp[0]
    Y[1] = Ytemp[1]
    Y[2] = Ytemp[2]


  solution = sint.Array(1)
  solution[0] = sint(0)

  print_ln("MSpecial:")
  @for_range(nSpecialMax)
  def range_body(i):
    print_ln("%s %s %s, %s, %s", Mgi[i][0].reveal(), Mgi[i][1].reveal(), Mgi[i][2].reveal(), MgiEmpty[i].reveal(), MgiIndex[i].reveal())

  print_ln("YSpecial:")
  @for_range(nSpecialMax)
  def range_body(i):
    print_ln("%s %s %s, %s, %s", Ygi[i][0].reveal(), Ygi[i][1].reveal(), Ygi[i][2].reveal(), YgiEmpty[i].reveal(), YgiIndex[i].reveal())


  @for_range(nSpecialMax)
  def range_body(i):
    @for_range(nSpecialMax)
    def inner_body(j):
      isMatch = (Ygi[j][0] == Mgi[i][0]) * (Ygi[j][1] == Mgi[i][1]) * (Ygi[j][2] == Mgi[i][2])
      isMatch = isMatch * (1 - YgiEmpty[j]) * (1 - MgiEmpty[i]) 
      solution[0] = mux(isMatch, YgiIndex[j] - MgiIndex[i] + (a + b)/2, solution[0])
        
  return solution[0].reveal()

# Assumes m is a bit-string, with low-order bits first
# In practice, this would always be done locally. Included for testing purposes.
def enc(g, pk, M):

  r = sint.Array(254)   # Really should be 256. 
  @for_range(254)
  def loop_body(i):
    r[i] = sint.get_random_int(1)

  c1 = reveal(multiply(g, r, 254))
  c2 = reveal(add(multiply(pk, r, 254), M))

  return [c1, c2]


# sk is the secret key, represented as a 256 bit sint array
def dec(c, sk):

  c0 = reveal(c[0]) 
 
  d = multiply(c0, sk, 256)

  M = sub(c[1], d)

  return M

