execfile('/root/SCALE-MAMBA/Programs/ring/ring.mpc')


class LWE(object):

  # In order for decryption to work,
  #   N and m=2^lgM must be chosen appropriately.
  # Namely, if you wish to do t ciphertext additions
  #   and p is the size of the SCALE-MAMBA field, then need:
  #   t*2*N^2 < p / (2*m)
  def __init__(self, r, N, lgM, l):
    self.r = r  # Ring used
    self.N = N  # Half-width of binomial distributions
    # m = Modulus of ciphertext additions
    # Require p = 1 (mod 2m), and m to be a power of 2
    self.lgM = lgM
    self.m = 2 ** lgM    # Plaintext modulus (size per element)
    self.l = l           # Plaintext length (number of elements)
    return

  # Returns [a, b, s]
  # (a, b) is the public key, s is the secret key
  def key_gen(self):
    r = self.r
    N = self.N
    a = r.ringRandClear()
    s = r.ringBinom(N)
    e = r.ringBinom(N)
    @for_range(cint(1024))
    def range_body(i):
      e[i] *= cint(2)
    b = r.reveal(r.ringAdd(r.ringMulFast(a, s), e))

    res = [a, b, s]
    return res

  #calculate the decompose gadget
  def decompose_gadget(num_columns, mod_val):
    g = cint.Array(num_columns)
    #how to calculate g
    #shape of g?
    return g


  #do key switching
  def key_switching(g, s):
    r = self.r
    N = self.N
    s1 = r.ringBinom(N)
    e = r.ringBinom(N)
    u = r.ringRandClear()

    #v = -u*s1 + g*s + e
    #calculate -u*s1 and g*s using ringMulFast, then add them together and
    # also add e using ringAdd

    #k = (u|v) #joining two row vectors, shape of k ?

    return s1 #we also have to return k


  def new_ciphertext(g, c0, c1, k):
    #how to calculate g^-1. is it just a bit encoding
    #shape of g^-1 ?
    #calculate and return c0', c1'
    return 0


  # z is plaintext (array) of l elems each modulo m
  # returns ciphertext [u, v]
  def enc(self, a, b, z):
    r = self.r
    N = self.N
    m = self.m
    e0 = r.ringBinom(N)
    e1 = r.ringBinom(N)
    e2 = r.ringBinom(N)

    @for_range(cint(1024))
    def range_body(i):
      e1[i] *= cint(2)

    # u = a*e0 + 2*e1 (mod q)
    u = r.ringMulFast(a, e0)
    u = r.ringAdd(u, e1)

    # v = b*e0 + 2*e2 + round(p/m)z (mod p)
    mthP = cint(-1)/cint(m)

    zMthP = r.zero()

    for i in range(0, len(z)):
      zMthP[i] = z[i] * mthP

    @for_range(cint(1024))
    def range_body(i):
      e2[i] *= cint(2)

    v = r.ringMulFast(b, e0)
    v = r.ringAdd(v, e2)
    v = r.ringAdd(v, zMthP)

    res = [r.reveal(u), r.reveal(v)]
    return res


  def dec(self, u, v, s):
    r = self.r
    lgM = self.lgM
    m = 1 << lgM
    clearM = cint(m)
    zNoisy = r.ringSub(v, r.ringMulFast(u, s))
    halfMthP = cint(-1)/(2*m)
    z = sint.Array(self.l)
    @for_range(self.l)
    def round(i):
      zRangeI = zNoisy[i] + halfMthP
      zNotchesI = zRangeI * clearM
      z[i] = m - 1 - ((zNotchesI - 1) % m)

    return z

  def add(self, u1, u2):
    r = self.r
    res = r.reveal(r.ringAdd(u1, u2))
    return res

  def mul(self, u1, u2):
    r = self.r
    res = r.reveal(r.ringMulFast(u1, u2))
    return res
