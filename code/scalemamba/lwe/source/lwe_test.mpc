execfile('/root/SCALE-MAMBA/Programs/lwe/lwe.mpc')
from Compiler import mpc_math

#p = 227279464915964081784588273816791154689

w = cint(192022353834464625871979455242536387899)

lgN = 12
r = Ring(lgN, w)

N = 1
lgM = 20
l = 4096
n = 4096
lgP = 128
lwe = LWE(r, N, lgM, l, n, lgP)

#x = sint.Array(l)
#for i in range(l):
  #x[i] = sint(0)
  #print_ln("Plaintext is %s ", x[i].reveal())
#x[3] = sint(1)

noise = lwe.laplace(sint(1))
print_ln("Noise is %s ", noise.reveal())

## use mpc_math.floor_fx(x)) to get the floor of sfix x


############ Key gen ########################

#[b, a, s] = lwe.key_gen()

#print_ln("public key a")
#for i in range(len(a)):
  #print_ln("%s ", a[i])
#print_ln("public key b")
#for i in range(len(b)):
  #print_ln("%s ", b[i])
#for i in range(n):
  #output_shares(0, s[i])

#g = cint.Array(lgP)
#e = sint.Matrix(lgP, n)
#e_in = cint.Matrix(lgP, n)
#rlk_a_in = cint.Matrix(lgP, n)

#@for_range(lgP)
#def set_G(i):
  #g[i] = cint.public_input(0)

#@for_range(lgP)
#def _(i):
  #@for_range(n)
  #def _(j):
    #rlk_a_in[i][j] = cint(1)

#@for_range(n)
#def _(j):
  #for play_num in range(5):
    #tmp1 = sint.get_private_input_from(play_num)
    #tmp2 = tmp1.reveal()
    #rlk_a_in[i][j] ^= cint(tmp2)

#for_range(lgP)
#def _(i):
  #@for_range(n)
  #def _(j):
    #e_in[i][j] = cint(1)

#@for_range(lgP)
#def _(i):
  #@for_range(n)
  #def _(j):
    #for play_num in range(5):
      #tmp1 = sint.get_private_input_from(play_num)
      #tmp2 = tmp1.reveal()
      #e_in[i][j] ^= cint(tmp2)

#@for_range(lgP)
#def _(i):
  #@for_range(n)
  #def _(j):
    #e[i][j] = sint(e_in[i][j])

#[rlk_b, rlk_a] = lwe.rl_keys(s, rlk_a_in, g, e)

#@for_range(lgP)
#def _(i):
  #@for_range(n)
  #def _(j):
    #print_ln("%s ", rlk_a[i][j])
    #print_ln("%s ",  rlk_b[i][j])

############################################

#[v, u] = lwe.enc(b, a, x)

#x[3] = sint(0)
#x[5] = sint(1)

#[v1, u1] = lwe.enc(b, a, x)
#c0 = lwe.mul(v, v1)
#c1 = lwe.add(lwe.mul(u,v1), lwe.mul(v,u1))
#c2 = lwe.mul(u, u1)

#print_ln("########### ciphertext v #############")
#for i in range(len(v)):
  #print_ln("%s ", v[i])
#print_ln("############ ciphertext u ############")
#for i in range(len(u)):
  #print_ln("%s ", u[i])

############ Decrypt ########################

#v = cint.Array(n)
#u = cint.Array(n)

#@for_range(n)
#def set_V(i):
  #v[i] = cint.public_input(0)
#@for_range(n)
#def set_U(i):
  #u[i] = cint.public_input(0)

#s = sint.Array(n)
#@for_range(n)
#def copy(i):
  #tmp = [sint()]
  #input_shares(0, *tmp)
  #s[i] = tmp[0]

#x2 = lwe.dec(v, u, s)
#x2 = lwe.dec_mul(c0, c1, c2, s)

#for i in range(l):
  #z = x2[i] #+ sint.get_random_bit() #add noise
  #print_ln("Decrypt result is: %s ", z.reveal_to(0))

##########################################

#s = lwe.secret_key_gen()
#for i in range(n):
  #output_shares(0, s[i])

#@for_range(lgN)
#def _(i):
  #tmp_s = lwe.secret_key_gen()
  #@for_range(n)
  #def _(j):
    #output_shares(0, tmp_s[j])

#############################################

#print_ln("decompose gadget done")
#[s1, v1, u1] = lwe.key_switching(g, s)
#print_ln("key switching done")
#[v2, u2] = lwe.new_ciphertext(v, u, v1, u1)
#print_ln("new ciphertext done")
#x2 = lwe.dec(v2, u2, s1)

#[u1, v1] = lwe.enc(a, b, x)
#u2 = lwe.add(u, u1)
#v2 = lwe.add(v, v1)
#x2 = lwe.dec(u2, v2, s)


#for i in range(l):
  #x2[i].reveal_to(0)
  #print_ln("%s ", x2[i].reveal())
